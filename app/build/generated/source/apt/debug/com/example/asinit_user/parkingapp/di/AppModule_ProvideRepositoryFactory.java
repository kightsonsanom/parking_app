// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.asinit_user.parkingapp.di;

import android.app.Application;
import com.example.asinit_user.parkingapp.ServerMock;
import com.example.asinit_user.parkingapp.api.ParkingApi;
import com.example.asinit_user.parkingapp.repository.Repository;
import com.example.asinit_user.parkingapp.repository.SharedPreferencesRepo;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideRepositoryFactory implements Factory<Repository> {
  private final AppModule module;

  private final Provider<ServerMock> serverMockProvider;

  private final Provider<ParkingApi> parkingApiProvider;

  private final Provider<Application> applicationProvider;

  private final Provider<SharedPreferencesRepo> sharedPreferencesRepoProvider;

  public AppModule_ProvideRepositoryFactory(
      AppModule module,
      Provider<ServerMock> serverMockProvider,
      Provider<ParkingApi> parkingApiProvider,
      Provider<Application> applicationProvider,
      Provider<SharedPreferencesRepo> sharedPreferencesRepoProvider) {
    this.module = module;
    this.serverMockProvider = serverMockProvider;
    this.parkingApiProvider = parkingApiProvider;
    this.applicationProvider = applicationProvider;
    this.sharedPreferencesRepoProvider = sharedPreferencesRepoProvider;
  }

  @Override
  public Repository get() {
    return Preconditions.checkNotNull(
        module.provideRepository(
            serverMockProvider.get(),
            parkingApiProvider.get(),
            applicationProvider.get(),
            sharedPreferencesRepoProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<Repository> create(
      AppModule module,
      Provider<ServerMock> serverMockProvider,
      Provider<ParkingApi> parkingApiProvider,
      Provider<Application> applicationProvider,
      Provider<SharedPreferencesRepo> sharedPreferencesRepoProvider) {
    return new AppModule_ProvideRepositoryFactory(
        module,
        serverMockProvider,
        parkingApiProvider,
        applicationProvider,
        sharedPreferencesRepoProvider);
  }

  public static Repository proxyProvideRepository(
      AppModule instance,
      ServerMock serverMock,
      ParkingApi parkingApi,
      Application application,
      SharedPreferencesRepo sharedPreferencesRepo) {
    return instance.provideRepository(serverMock, parkingApi, application, sharedPreferencesRepo);
  }
}
