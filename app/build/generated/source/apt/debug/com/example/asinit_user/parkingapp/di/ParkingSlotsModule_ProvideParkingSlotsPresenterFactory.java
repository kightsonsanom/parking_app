// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.asinit_user.parkingapp.di;

import com.example.asinit_user.parkingapp.mainView.parkingView.ParkingSlotsPresenter;
import com.example.asinit_user.parkingapp.repository.Repository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ParkingSlotsModule_ProvideParkingSlotsPresenterFactory
    implements Factory<ParkingSlotsPresenter> {
  private final ParkingSlotsModule module;

  private final Provider<Repository> repositoryProvider;

  public ParkingSlotsModule_ProvideParkingSlotsPresenterFactory(
      ParkingSlotsModule module, Provider<Repository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public ParkingSlotsPresenter get() {
    return Preconditions.checkNotNull(
        module.provideParkingSlotsPresenter(repositoryProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<ParkingSlotsPresenter> create(
      ParkingSlotsModule module, Provider<Repository> repositoryProvider) {
    return new ParkingSlotsModule_ProvideParkingSlotsPresenterFactory(module, repositoryProvider);
  }

  public static ParkingSlotsPresenter proxyProvideParkingSlotsPresenter(
      ParkingSlotsModule instance, Repository repository) {
    return instance.provideParkingSlotsPresenter(repository);
  }
}
