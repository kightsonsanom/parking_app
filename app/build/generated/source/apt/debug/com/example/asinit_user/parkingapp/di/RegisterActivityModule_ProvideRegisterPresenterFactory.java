// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.asinit_user.parkingapp.di;

import android.app.Application;
import com.example.asinit_user.parkingapp.registerView.RegisterPresenter;
import com.example.asinit_user.parkingapp.repository.Repository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class RegisterActivityModule_ProvideRegisterPresenterFactory
    implements Factory<RegisterPresenter> {
  private final RegisterActivityModule module;

  private final Provider<Repository> repositoryProvider;

  private final Provider<Application> applicationProvider;

  public RegisterActivityModule_ProvideRegisterPresenterFactory(
      RegisterActivityModule module,
      Provider<Repository> repositoryProvider,
      Provider<Application> applicationProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public RegisterPresenter get() {
    return Preconditions.checkNotNull(
        module.provideRegisterPresenter(repositoryProvider.get(), applicationProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<RegisterPresenter> create(
      RegisterActivityModule module,
      Provider<Repository> repositoryProvider,
      Provider<Application> applicationProvider) {
    return new RegisterActivityModule_ProvideRegisterPresenterFactory(
        module, repositoryProvider, applicationProvider);
  }

  public static RegisterPresenter proxyProvideRegisterPresenter(
      RegisterActivityModule instance, Repository repository, Application application) {
    return instance.provideRegisterPresenter(repository, application);
  }
}
