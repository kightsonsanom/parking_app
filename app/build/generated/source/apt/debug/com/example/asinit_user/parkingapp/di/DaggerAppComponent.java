// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.asinit_user.parkingapp.di;

import android.app.Activity;
import android.app.Application;
import android.support.v4.app.Fragment;
import com.example.asinit_user.parkingapp.App;
import com.example.asinit_user.parkingapp.App_MembersInjector;
import com.example.asinit_user.parkingapp.ServerMock;
import com.example.asinit_user.parkingapp.api.ParkingApi;
import com.example.asinit_user.parkingapp.login.LoginActivity;
import com.example.asinit_user.parkingapp.login.LoginActivity_MembersInjector;
import com.example.asinit_user.parkingapp.login.LoginPresenter;
import com.example.asinit_user.parkingapp.mainView.MainActivity;
import com.example.asinit_user.parkingapp.mainView.MainActivity_MembersInjector;
import com.example.asinit_user.parkingapp.mainView.parkingView.ParkingSlotsFragment;
import com.example.asinit_user.parkingapp.mainView.parkingView.ParkingSlotsFragment_MembersInjector;
import com.example.asinit_user.parkingapp.mainView.parkingView.ParkingSlotsPresenter;
import com.example.asinit_user.parkingapp.mainView.usersView.UserDetailsFragment;
import com.example.asinit_user.parkingapp.mainView.usersView.UserDetailsFragment_MembersInjector;
import com.example.asinit_user.parkingapp.mainView.usersView.UserDetailsPresenter;
import com.example.asinit_user.parkingapp.mainView.usersView.UsersListFragment;
import com.example.asinit_user.parkingapp.mainView.usersView.UsersListFragment_MembersInjector;
import com.example.asinit_user.parkingapp.mainView.usersView.UsersListPresenter;
import com.example.asinit_user.parkingapp.registerView.RegisterActivity;
import com.example.asinit_user.parkingapp.registerView.RegisterActivity_MembersInjector;
import com.example.asinit_user.parkingapp.registerView.RegisterPresenter;
import com.example.asinit_user.parkingapp.repository.Repository;
import com.example.asinit_user.parkingapp.repository.SharedPreferencesRepo;
import com.google.gson.Gson;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Builder>
      loginActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent.Builder>
      registerActivitySubcomponentBuilderProvider;

  private Provider<ServerMock> provideServerMockProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<ParkingApi> provideParkingApiProvider;

  private Provider<Application> applicationProvider;

  private Provider<SharedPreferencesRepo> provideSharedPreferencesProvider;

  private Provider<Repository> provideRepositoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(3)
        .put(LoginActivity.class, (Provider) loginActivitySubcomponentBuilderProvider)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(RegisterActivity.class, (Provider) registerActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.loginActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Builder
              get() {
            return new LoginActivitySubcomponentBuilder();
          }
        };
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Builder
              get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.registerActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent
                  .Builder
              get() {
            return new RegisterActivitySubcomponentBuilder();
          }
        };
    this.provideServerMockProvider =
        DoubleCheck.provider(AppModule_ProvideServerMockFactory.create(builder.appModule));
    this.provideGsonProvider =
        DoubleCheck.provider(AppModule_ProvideGsonFactory.create(builder.appModule));
    this.provideParkingApiProvider =
        DoubleCheck.provider(
            AppModule_ProvideParkingApiFactory.create(builder.appModule, provideGsonProvider));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            AppModule_ProvideSharedPreferencesFactory.create(
                builder.appModule, applicationProvider));
    this.provideRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideRepositoryFactory.create(
                builder.appModule,
                provideServerMockProvider,
                provideParkingApiProvider,
                applicationProvider,
                provideSharedPreferencesProvider));
  }

  @Override
  public void inject(App app) {
    injectApp(app);
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class LoginActivitySubcomponentBuilder
      extends ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Builder {
    private LoginActivityModule loginActivityModule;

    private LoginActivity seedInstance;

    @Override
    public ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent build() {
      if (loginActivityModule == null) {
        this.loginActivityModule = new LoginActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(LoginActivity.class.getCanonicalName() + " must be set");
      }
      return new LoginActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(LoginActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl
      implements ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent {
    private Provider<LoginPresenter> provideLoginPresenterProvider;

    private LoginActivitySubcomponentImpl(LoginActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoginActivitySubcomponentBuilder builder) {
      this.provideLoginPresenterProvider =
          DoubleCheck.provider(
              LoginActivityModule_ProvideLoginPresenterFactory.create(
                  builder.loginActivityModule,
                  DaggerAppComponent.this.provideRepositoryProvider,
                  DaggerAppComponent.this.applicationProvider));
    }

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    private LoginActivity injectLoginActivity(LoginActivity instance) {
      LoginActivity_MembersInjector.injectLoginPresenter(
          instance, provideLoginPresenterProvider.get());
      return instance;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilderModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<
            FragmentBuildersModule_ContributeParkingSlotsFragment.ParkingSlotsFragmentSubcomponent
                .Builder>
        parkingSlotsFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributesUsersListFragment.UsersListFragmentSubcomponent
                .Builder>
        usersListFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeUserDetailsFragment.UserDetailsFragmentSubcomponent
                .Builder>
        userDetailsFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(3)
          .put(
              ParkingSlotsFragment.class,
              (Provider) parkingSlotsFragmentSubcomponentBuilderProvider)
          .put(UsersListFragment.class, (Provider) usersListFragmentSubcomponentBuilderProvider)
          .put(UserDetailsFragment.class, (Provider) userDetailsFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.parkingSlotsFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeParkingSlotsFragment.ParkingSlotsFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeParkingSlotsFragment
                    .ParkingSlotsFragmentSubcomponent.Builder
                get() {
              return new ParkingSlotsFragmentSubcomponentBuilder();
            }
          };
      this.usersListFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributesUsersListFragment.UsersListFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributesUsersListFragment.UsersListFragmentSubcomponent
                    .Builder
                get() {
              return new UsersListFragmentSubcomponentBuilder();
            }
          };
      this.userDetailsFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeUserDetailsFragment.UserDetailsFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeUserDetailsFragment
                    .UserDetailsFragmentSubcomponent.Builder
                get() {
              return new UserDetailsFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectRepository(
          instance, DaggerAppComponent.this.provideRepositoryProvider.get());
      return instance;
    }

    private final class ParkingSlotsFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeParkingSlotsFragment
            .ParkingSlotsFragmentSubcomponent.Builder {
      private ParkingSlotsModule parkingSlotsModule;

      private ParkingSlotsFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeParkingSlotsFragment.ParkingSlotsFragmentSubcomponent
          build() {
        if (parkingSlotsModule == null) {
          this.parkingSlotsModule = new ParkingSlotsModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              ParkingSlotsFragment.class.getCanonicalName() + " must be set");
        }
        return new ParkingSlotsFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ParkingSlotsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ParkingSlotsFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeParkingSlotsFragment
            .ParkingSlotsFragmentSubcomponent {
      private Provider<ParkingSlotsPresenter> provideParkingSlotsPresenterProvider;

      private ParkingSlotsFragmentSubcomponentImpl(
          ParkingSlotsFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ParkingSlotsFragmentSubcomponentBuilder builder) {
        this.provideParkingSlotsPresenterProvider =
            DoubleCheck.provider(
                ParkingSlotsModule_ProvideParkingSlotsPresenterFactory.create(
                    builder.parkingSlotsModule, DaggerAppComponent.this.provideRepositoryProvider));
      }

      @Override
      public void inject(ParkingSlotsFragment arg0) {
        injectParkingSlotsFragment(arg0);
      }

      private ParkingSlotsFragment injectParkingSlotsFragment(ParkingSlotsFragment instance) {
        ParkingSlotsFragment_MembersInjector.injectParkingSlotsPresenter(
            instance, provideParkingSlotsPresenterProvider.get());
        return instance;
      }
    }

    private final class UsersListFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributesUsersListFragment.UsersListFragmentSubcomponent
            .Builder {
      private UsersListModule usersListModule;

      private UsersListFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributesUsersListFragment.UsersListFragmentSubcomponent
          build() {
        if (usersListModule == null) {
          this.usersListModule = new UsersListModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              UsersListFragment.class.getCanonicalName() + " must be set");
        }
        return new UsersListFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(UsersListFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class UsersListFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributesUsersListFragment
            .UsersListFragmentSubcomponent {
      private Provider<UsersListPresenter> provideUsersListPresenterProvider;

      private UsersListFragmentSubcomponentImpl(UsersListFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final UsersListFragmentSubcomponentBuilder builder) {
        this.provideUsersListPresenterProvider =
            DoubleCheck.provider(
                UsersListModule_ProvideUsersListPresenterFactory.create(
                    builder.usersListModule, DaggerAppComponent.this.provideRepositoryProvider));
      }

      @Override
      public void inject(UsersListFragment arg0) {
        injectUsersListFragment(arg0);
      }

      private UsersListFragment injectUsersListFragment(UsersListFragment instance) {
        UsersListFragment_MembersInjector.injectUsersListPresenter(
            instance, provideUsersListPresenterProvider.get());
        return instance;
      }
    }

    private final class UserDetailsFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeUserDetailsFragment.UserDetailsFragmentSubcomponent
            .Builder {
      private UserDetailsModule userDetailsModule;

      private UserDetailsFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeUserDetailsFragment.UserDetailsFragmentSubcomponent
          build() {
        if (userDetailsModule == null) {
          this.userDetailsModule = new UserDetailsModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              UserDetailsFragment.class.getCanonicalName() + " must be set");
        }
        return new UserDetailsFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(UserDetailsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class UserDetailsFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeUserDetailsFragment
            .UserDetailsFragmentSubcomponent {
      private Provider<UserDetailsPresenter> provideUserDetailsPresenterProvider;

      private UserDetailsFragmentSubcomponentImpl(UserDetailsFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final UserDetailsFragmentSubcomponentBuilder builder) {
        this.provideUserDetailsPresenterProvider =
            DoubleCheck.provider(
                UserDetailsModule_ProvideUserDetailsPresenterFactory.create(
                    builder.userDetailsModule, DaggerAppComponent.this.provideRepositoryProvider));
      }

      @Override
      public void inject(UserDetailsFragment arg0) {
        injectUserDetailsFragment(arg0);
      }

      private UserDetailsFragment injectUserDetailsFragment(UserDetailsFragment instance) {
        UserDetailsFragment_MembersInjector.injectUserDetailsPresenter(
            instance, provideUserDetailsPresenterProvider.get());
        return instance;
      }
    }
  }

  private final class RegisterActivitySubcomponentBuilder
      extends ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent
          .Builder {
    private RegisterActivityModule registerActivityModule;

    private RegisterActivity seedInstance;

    @Override
    public ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent build() {
      if (registerActivityModule == null) {
        this.registerActivityModule = new RegisterActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(RegisterActivity.class.getCanonicalName() + " must be set");
      }
      return new RegisterActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(RegisterActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class RegisterActivitySubcomponentImpl
      implements ActivityBuilderModule_ContributeRegisterActivity.RegisterActivitySubcomponent {
    private Provider<RegisterPresenter> provideRegisterPresenterProvider;

    private RegisterActivitySubcomponentImpl(RegisterActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RegisterActivitySubcomponentBuilder builder) {
      this.provideRegisterPresenterProvider =
          DoubleCheck.provider(
              RegisterActivityModule_ProvideRegisterPresenterFactory.create(
                  builder.registerActivityModule,
                  DaggerAppComponent.this.provideRepositoryProvider,
                  DaggerAppComponent.this.applicationProvider));
    }

    @Override
    public void inject(RegisterActivity arg0) {
      injectRegisterActivity(arg0);
    }

    private RegisterActivity injectRegisterActivity(RegisterActivity instance) {
      RegisterActivity_MembersInjector.injectRegisterPresenter(
          instance, provideRegisterPresenterProvider.get());
      return instance;
    }
  }
}
